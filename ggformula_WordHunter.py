# app_streamlit_suffix_kids_simple.py
import streamlit as st
import pandas as pd
import textwrap
from io import BytesIO
from pathlib import Path
from deep_translator import GoogleTranslator
from nltk.corpus import wordnet
import nltk
import time

# ЁЯФ╣ NLTK Data Download (cache роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ)
@st.cache_resource
def load_nltk_data():
    nltk.download('wordnet')
    nltk.download('omw-1.4')

load_nltk_data()

# ---------- CONFIG ----------
st.set_page_config(
    page_title="роЪрпКро▓рпН ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ", 
    layout="wide",
    page_icon="ЁЯзй"
)

# роОро│ро┐роп ро╡рогрпНрогродрпН родро┐роЯрпНроЯроорпН
COLORS = {
    'primary': '#3498db',
    'secondary': '#2ecc71',
    'accent': '#e74c3c',
    'background': '#f9f9f9',
    'text': '#2c3e50'
}

# ---------- Helpers ----------
@st.cache_data(show_spinner=False)
def translate_to_tamil(text: str):
    try:
        return GoogleTranslator(source='auto', target='ta').translate(text)
    except Exception:
        return ""

@st.cache_data(show_spinner=False, max_entries=100)
def find_matches(words, suffix, before_letters):
    suf = suffix.lower()
    matched = [w for w in words if w.lower().endswith(suf) and 
              (before_letters == 0 or len(w) - len(suf) == before_letters)]
    return sorted(matched, key=len)

# ---------- UI Styling ----------
st.markdown(f"""
<style>
/* роОро│ро┐роорпИропро╛рой рооро▒рпНро▒рпБроорпН ро╡рпЗроХрооро╛рой UI */
body {{
    background-color: {COLORS['background']};
    font-family: 'Arial', sans-serif;
}}

.stApp {{
    max-width: 1200px;
    margin: 0 auto;
}}

h1, h2, h3 {{
    color: {COLORS['primary']};
}}

.stButton>button {{
    background-color: {COLORS['secondary']};
    color: white;
    border: none;
    border-radius: 8px;
    padding: 10px 20px;
    font-size: 16px;
}}

.stButton>button:hover {{
    background-color: #{COLORS['secondary']}dd;
}}

.stSelectbox>div>div>select {{
    font-size: 16px;
    padding: 10px;
}}

/* роОро│ро┐роорпИропро╛рой роЕроЯрпНроЯро╡рогрпИ ро╡роЯро┐ро╡роорпИрокрпНрокрпБ */
table {{
    width: 100%;
    border-collapse: collapse;
    margin: 15px 0;
}}

th {{
    background-color: {COLORS['primary']};
    color: white;
    padding: 12px;
    text-align: left;
}}

td {{
    padding: 10px;
    border-bottom: 1px solid #ddd;
}}

tr:nth-child(even) {{
    background-color: #f2f2f2;
}}

/* роЪрпКро▓рпН роорпБройрпНройро┐ро▓рпИрокрпНрокроЯрпБродрпНродро▓рпН */
.highlight {{
    color: {COLORS['accent']};
    font-weight: bold;
}}
</style>
""", unsafe_allow_html=True)

# родро▓рпИрокрпНрокрпБ рокроХрпБродро┐
st.markdown(f"""
<div style="text-align:center; padding:20px 0;">
    <h1 style="color:{COLORS['primary']};">ЁЯзй роЪрпКро▓рпН ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ</h1>
    <p>роЪрпКро▒рпНроХро│ро┐ройрпН роЗро▒рпБродро┐ роОро┤рпБродрпНродрпБроХро│рпИроХрпН роХрогрпНроЯрпБрокро┐роЯро┐родрпНродрпБ роЕро░рпНродрпНродроЩрпНроХро│рпИродрпН родрпЖро░ро┐роирпНродрпБроХрпКро│рпНро│рпБроЩрпНроХро│рпН!</p>
</div>
""", unsafe_allow_html=True)

# роорпБроХрпНроХро┐роп рокроХрпНроХ ро╡роЯро┐ро╡роорпИрокрпНрокрпБ
col1, col2 = st.columns([1, 2])

with col1:
    # родрпЗроЯро▓рпН рокроХрпБродро┐
    st.subheader("ЁЯФН роЪрпКро▒рпНроХро│рпИродрпН родрпЗроЯрпБ")
    
    suffix_input = st.text_input(
        "роЗро▒рпБродро┐ роОро┤рпБродрпНродрпБроХро│рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН (роО.роХро╛. 'ing')", 
        value="ing",
        key="suffix_input"
    )
    
    before_letters = st.number_input(
        "роЗро▒рпБродро┐ роОро┤рпБродрпНродрпБроХро│рпБроХрпНроХрпБ роорпБройрпН роОродрпНродройрпИ роОро┤рпБродрпНродрпБроХро│рпН?", 
        min_value=0, 
        step=1, 
        value=0,
        help="0 роОройро┐ро▓рпН роОродрпНродройрпИ роЗро░рпБроирпНродро╛ро▓рпБроорпН рокро░ро╡ро╛ропро┐ро▓рпНро▓рпИ"
    )
    
    # ро╡рпЗроХрооро╛рой родрпЗроЯро▓рпБроХрпНроХрпБ progress bar
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    # роЪрпКро▒рпНроХро│рпИ ро╡рпЗроХрооро╛роХ роПро▒рпНро▒рпБроХро┐ро▒родрпБ
    with st.spinner("роЪрпКро▒рпНроХро│рпН роПро▒рпНро▒рокрпНрокроЯрпБроХро┐ройрпНро▒рой..."):
        all_words = sorted(set(wordnet.all_lemma_names()), key=lambda x: (len(x), x.lower()))
        progress_bar.progress(100)
        status_text.success("тЬЕ роЪрпКро▒рпНроХро│рпН родропро╛ро░рпН!")
        time.sleep(0.5)
        progress_bar.empty()
        status_text.empty()
    
    # рокрпКро░рпБродрпНродрооро╛рой роЪрпКро▒рпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐родро▓рпН
    if suffix_input:
        with st.spinner("роЪрпКро▒рпНроХро│рпН родрпЗроЯрокрпНрокроЯрпБроХро┐ройрпНро▒рой..."):
            matches = find_matches(all_words, suffix_input, before_letters)
            st.success(f"**роХро┐роЯрпИродрпНрод роЪрпКро▒рпНроХро│рпН:** {len(matches)}")
            
            # роЪрпКро▒рпНроХро│ро┐ройрпН рокроЯрпНроЯро┐ропро▓рпН
            for w in matches[:300]:  # роорпБродро▓рпН 300 роЪрпКро▒рпНроХро│рпИ роороЯрпНроЯрпБроорпН роХро╛роЯрпНроЯрпБроХро┐ро▒родрпБ
                if suffix_input.lower() in w.lower():
                    parts = w.rsplit(suffix_input, 1)
                    st.markdown(
                        f"{parts[0]}<span class='highlight'>{suffix_input}</span>" if len(parts) > 1 else w,
                        unsafe_allow_html=True
                    )

with col2:
    # ро╡ро┐ро░рпИро╡ро╛рой родрпЗро░рпНро╡рпБ рооро▒рпНро▒рпБроорпН роЕро░рпНродрпНродроЩрпНроХро│рпН
    st.subheader("ЁЯУЪ роЕро░рпНродрпНродроЩрпНроХро│рпН")
    
    # родрпЗро░рпНро╡рпБ рокрпЖроЯрпНроЯро┐ рооро▒рпНро▒рпБроорпН роЯро╡рпБройрпНро▓рпЛроЯрпН рокрпКродрпНродро╛ройрпН
    col_select, col_download = st.columns([3, 1])
    
    with col_select:
        chosen = st.selectbox(
            "роТро░рпБ роЪрпКро▓рпНро▓рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН", 
            [""] + (matches[:200] if 'matches' in locals() else []),
            key="word_select"
        )
    
    with col_download:
        if chosen:
            towrite = BytesIO()
            syns = wordnet.synsets(chosen)
            if syns:
                data_rows = []
                for i, syn in enumerate(syns, start=1):
                    pos = "ро╡ро┐ройрпИ" if syn.pos() == 'v' else "рокрпЖропро░рпН" if syn.pos() == 'n' else "рокрпЖропро░роЯрпИ" if syn.pos() in ('a', 's') else "ро╡ро┐ройрпИропроЯрпИ"
                    eng = syn.definition()
                    ta = translate_to_tamil(eng)
                    data_rows.append({"роОрогрпН": i, "ро╡роХрпИ": pos, "роЕро░рпНродрпНродроорпН": eng, "родрооро┐ро┤рпН": ta})
                
                df_export = pd.DataFrame(data_rows)
                with pd.ExcelWriter(towrite, engine="xlsxwriter") as writer:
                    df_export.to_excel(writer, index=False, sheet_name="Meanings")
                towrite.seek(0)
                
                st.download_button(
                    "ЁЯУК Excel-роЖроХ роЪрпЗрооро┐роХрпНроХ", 
                    towrite, 
                    file_name=f"{chosen}_роЕро░рпНродрпНродроЩрпНроХро│рпН.xlsx",
                    help="роЗроирпНрод роЪрпКро▓рпНро▓ро┐ройрпН роЕро░рпНродрпНродроЩрпНроХро│рпИ Excel роХрпЛрокрпНрокро╛роХ роЪрпЗрооро┐роХрпНроХ"
                )
    
    # родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯ роЪрпКро▓рпНро▓ро┐ройрпН роЕро░рпНродрпНродроЩрпНроХро│рпН
    if chosen:
        st.markdown(f"### тЬи {chosen}")
        
        syns = wordnet.synsets(chosen)
        if not syns:
            st.info("роЗроирпНрод роЪрпКро▓рпНро▓рпБроХрпНроХрпБ роЕро░рпНродрпНродроЩрпНроХро│рпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ.")
        else:
            for i, syn in enumerate(syns, start=1):
                pos = "ро╡ро┐ройрпИ" if syn.pos() == 'v' else "рокрпЖропро░рпН" if syn.pos() == 'n' else "рокрпЖропро░роЯрпИ" if syn.pos() in ('a', 's') else "ро╡ро┐ройрпИропроЯрпИ"
                eng = syn.definition()
                ta = translate_to_tamil(eng)
                
                with st.expander(f"роЕро░рпНродрпНродроорпН {i} ({pos})"):
                    st.markdown(f"**роЖроЩрпНроХро┐ро▓роорпН:** {eng}")
                    if ta:
                        st.markdown(f"**родрооро┐ро┤рпН:** {ta}")

# роЕроЯро┐роХрпНроХрпБро▒ро┐рокрпНрокрпБ
st.markdown("""
<div style="margin-top:30px; padding:15px; background:#f0f0f0; border-radius:8px; text-align:center;">
    <p>ЁЯТб роЙродро╡ро┐: роХрпБро▒рпБроХро┐роп роЗро▒рпБродро┐ роОро┤рпБродрпНродрпБроХро│рпИ роорпБродро▓ро┐ро▓рпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН (роО.роХро╛ 'ing', 'tion')</p>
</div>
""", unsafe_allow_html=True)
