# app_streamlit_suffix_kids_final.py
import streamlit as st
import pandas as pd
import textwrap
from io import BytesIO
from pathlib import Path
from deep_translator import GoogleTranslator
from nltk.corpus import wordnet
import nltk
import time

# ЁЯФ╣ NLTK Data Download (cache роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ)
@st.cache_resource
def load_nltk_data():
    nltk.download('wordnet')
    nltk.download('omw-1.4')

load_nltk_data()

# ---------- CONFIG ----------
st.set_page_config(
    page_title="роЪрпКро▓рпН ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ - роХрпБро┤роирпНродрпИроХро│рпБроХрпНроХро╛рой роЖроЩрпНроХро┐ро▓роорпН", 
    layout="wide",
    page_icon="ЁЯМИ"
)

# роХрпБро┤роирпНродрпИроХро│рпБроХрпНроХро╛рой рокрпБродро┐роп ро╡рогрпНрогродрпН родро┐роЯрпНроЯроорпН
COLORS = {
    'primary': '#4285F4',  # роорпЖройрпНроорпИропро╛рой роирпАро▓роорпН
    'secondary': '#34A853',  # роорпЖройрпНроорпИропро╛рой рокроЪрпНроЪрпИ
    'accent': '#EA4335',  # роорпЖройрпНроорпИропро╛рой роЪро┐ро╡рокрпНрокрпБ
    'background': '#F8F9FA',  # рооро┐роХро╡рпБроорпН роЗро▓роХрпБро╡ро╛рой роЪро╛роорпНрокро▓рпН
    'text': '#FFFFFF',  # ро╡рпЖро│рпНро│рпИ роОро┤рпБродрпНродрпБроХрпНроХро│рпН
    'highlight': '#FBBC05',  # роорпЖройрпНроорпИропро╛рой роороЮрпНроЪро│рпН
    'footer': '#E8EAED',  # роорпЖройрпНроорпИропро╛рой роЕроЯро┐роХрпНроХрпБро▒ро┐рокрпНрокрпБ рокроХрпБродро┐
    'card': '#EA4335',  # роорпЖройрпНроорпИропро╛рой роЪро┐ро╡рокрпНрокрпБ роЕроЯрпНроЯрпИроХро│рпН
    'border': '#DADCE0'  # роОро▓рпНро▓рпИроХрпНроХрпЛроЯрпБроХро│рпН
}

# ---------- Helpers ----------
@st.cache_data(show_spinner=False)
def translate_to_tamil(text: str):
    try:
        return GoogleTranslator(source='auto', target='ta').translate(text)
    except Exception:
        return ""

@st.cache_data(show_spinner=False, max_entries=100)
def find_matches(words, suffix, before_letters):
    suf = suffix.lower()
    matched = [w for w in words if w.lower().endswith(suf) and 
              (before_letters == 0 or len(w) - len(suf) == before_letters)]
    return sorted(matched, key=len)

def get_related_words(synset):
    """родрпКроЯро░рпНрокрпБроЯрпИроп ро╡ро╛ро░рпНродрпНродрпИроХро│рпИрокрпН рокрпЖро▒рпБро╡родрпБ"""
    related = {
        'роТродрпНрод рокрпКро░рпБро│рпН': [],
        'роОродро┐ро░рпН рокрпКро░рпБро│рпН': [],
        'роЙродро╛ро░рогроЩрпНроХро│рпН': []
    }
    
    for lemma in synset.lemmas():
        if lemma.name() != synset.name().split('.')[0]:
            related['роТродрпНрод рокрпКро░рпБро│рпН'].append(lemma.name())
        for antonym in lemma.antonyms():
            related['роОродро┐ро░рпН рокрпКро░рпБро│рпН'].append(antonym.name())
    
    if synset.examples():
        related['роЙродро╛ро░рогроЩрпНроХро│рпН'] = synset.examples()
    
    return related

# ---------- UI Styling ----------
st.markdown(f"""
<style>
/* роХрпБро┤роирпНродрпИроХро│рпБроХрпНроХро╛рой рокрпБродро┐роп ро╡рогрпНрогрооропрооро╛рой UI */
body {{
    background-color: {COLORS['background']};
    font-family: 'Comic Sans MS', cursive, sans-serif;
    line-height: 1.6;
}}

.stApp {{
    max-width: 1200px;
    margin: 0 auto;
    padding-top: 1rem;
}}

h1, h2, h3, h4 {{
    color: {COLORS['primary']};
    margin-bottom: 0.5rem !important;
}}

/* роХрпБро┤роирпНродрпИроХро│рпБроХрпНроХро╛рой рокрпКродрпНродро╛ройрпНроХро│рпН */
.stButton>button {{
    background-color: {COLORS['secondary']};
    color: white;
    border: none;
    border-radius: 12px;
    padding: 12px 24px;
    font-size: 16px;
    margin-top: 0.5rem;
    transition: all 0.3s;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}}

.stButton>button:hover {{
    background-color: #{COLORS['secondary']}dd;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}}

/* родрпЗро░рпНро╡рпБ рокрпЖроЯрпНроЯро┐ ро╡роЯро┐ро╡роорпИрокрпНрокрпБ */
.stSelectbox>div>div>select {{
    font-size: 16px;
    padding: 12px;
    margin-bottom: 0.5rem;
    border-radius: 12px;
    border: 2px solid {COLORS['border']};
}}

/* роЕроЯрпНроЯро╡рогрпИ ро╡роЯро┐ро╡роорпИрокрпНрокрпБ */
table {{
    width: 100%;
    border-collapse: collapse;
    margin: 15px 0;
    font-size: 15px;
    border-radius: 12px;
    overflow: hidden;
}}

th {{
    background-color: {COLORS['primary']};
    color: white;
    padding: 14px;
    text-align: left;
    font-size: 16px;
}}

td {{
    padding: 12px;
    border-bottom: 1px solid {COLORS['border']};
}}

tr:nth-child(even) {{
    background-color: #f5f5f5;
}}

/* роЪрпКро▓рпН роорпБройрпНройро┐ро▓рпИрокрпНрокроЯрпБродрпНродро▓рпН */
.highlight {{
    color: {COLORS['accent']};
    font-weight: bold;
    font-size: 18px;
}}

/* роЪрпКро▒рпНроХро│рпН рокроЯрпНроЯро┐ропро▓рпН */
.word-list {{
    font-size: 17px;
    line-height: 2.2;
    column-count: 1;
}}

.word-item {{
    margin-bottom: 10px;
    padding: 8px;
    border-radius: 8px;
    transition: all 0.2s;
}}

.word-item:hover {{
    background-color: {COLORS['highlight']}22;
}}

/* роЕроЯрпНроЯрпИроХро│рпН */
.card {{
    background-color: {COLORS['card']};
    color: {COLORS['text']};
    border-radius: 16px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    border: 1px solid {COLORS['border']};
}}

/* роЕроЯро┐роХрпНроХрпБро▒ро┐рокрпНрокрпБ */
.footer {{
    background-color: {COLORS['footer']};
    padding: 18px;
    border-radius: 16px;
    margin-top: 30px;
    font-size: 15px;
    color: {COLORS['text']};
    text-align: center;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}}

/* родрпКроЯро░рпНрокрпБроЯрпИроп роЪрпКро▒рпНроХро│рпН роЕроЯрпНроЯрпИ */
.related-words-card {{
    background-color: {COLORS['card']};
    color: {COLORS['text']};
    border-radius: 12px;
    padding: 15px;
    margin-top: 15px;
    border: 1px solid {COLORS['border']};
}}

.related-word-item {{
    padding: 8px;
    margin: 5px 0;
    background-color: {COLORS['highlight']}15;
    border-radius: 8px;
    display: inline-block;
    color: {COLORS['text']};
}}

/* роорпЗро▓рпН рокроЯрпНроЯрпИ */
.top-bar {{
    background-color: {COLORS['primary']};
    padding: 15px;
    border-radius: 12px;
    margin-bottom: 20px;
    color: white;
}}

.search-row {{
    display: flex;
    gap: 15px;
    align-items: center;
    margin-bottom: 15px;
}}

/* роорпБройрпНройрпЗро▒рпНро▒ рокроЯрпНроЯрпИ */
.stProgress > div > div > div > div {{
    background-color: {COLORS['accent']} !important;
}}
</style>
""", unsafe_allow_html=True)

# родро▓рпИрокрпНрокрпБ рокроХрпБродро┐
st.markdown(f"""
<div style="text-align:center; padding-bottom:20px;">
    <h1 style="color:{COLORS['primary']}; margin-bottom:10px;">ЁЯМИ роЪрпКро▓рпН ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ</h1>
    <p style="color:{COLORS['text']}; font-size:18px; background-color:{COLORS['primary']}; padding:10px; border-radius:8px;">роЪрпКро▒рпНроХро│ро┐ройрпН роЗро░роХроЪро┐ропроЩрпНроХро│рпИроХрпН роХрогрпНроЯрпБрокро┐роЯро┐рокрпНрокрпЛроорпН!</p>
</div>
""", unsafe_allow_html=True)

# рокрпБродро┐роп роЪрпКро▓рпН роЪрпЗро░рпНроХрпНроХрпБроорпН рокроХрпБродро┐ (роорпЗро▓рпН рокроХрпБродро┐ропро┐ро▓рпН)
with st.container():
    st.markdown(f"""
    <div class="top-bar">
        <h3 style="margin:0; color:white;">рокрпБродро┐роп роЪрпКро▓рпН роЪрпЗро░рпНроХрпНроХ</h3>
    </div>
    <div class="card">
    """, unsafe_allow_html=True)
    
    add_col1, add_col2 = st.columns([3, 1])
    with add_col1:
        add_w = st.text_input("рокрпБродро┐роп роЪрпКро▓рпНро▓рпИ роЗроЩрпНроХрпЗ роОро┤рпБродро╡рпБроорпН", key="add_word")
    with add_col2:
        if st.button("роЪрпЗро░рпНроХрпНроХ", key="add_button"):
            if not add_w.strip():
                st.warning("роТро░рпБ роЪрпКро▓рпНро▓рпИ роОро┤рпБродро╡рпБроорпН.")
            else:
                CACHE_PATH = Path("data/wordlist.txt")
                CACHE_PATH.parent.mkdir(parents=True, exist_ok=True)
                with open(CACHE_PATH, "a", encoding="utf-8") as f:
                    f.write("\n" + add_w.strip())
                st.success(f"'{add_w.strip()}' роЪрпКро▓рпН ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ!")
                time.sleep(1)
                st.rerun()
    
    st.markdown("</div>", unsafe_allow_html=True)  # card close

# роорпБроХрпНроХро┐роп рокроХрпНроХ ро╡роЯро┐ро╡роорпИрокрпНрокрпБ
col1, col2 = st.columns([1, 2])

with col1:
    # родрпЗроЯро▓рпН рокроХрпБродро┐ - роТро░рпЗ ро╡ро░ро┐роЪрпИропро┐ро▓рпН
    with st.container():
        st.markdown(f"""
        <div class="card">
            <div class="search-row">
                <h3 style="margin:0;">ЁЯФН роЪрпКро▒рпНроХро│рпИродрпН родрпЗроЯрпБ</h3>
            </div>
        """, unsafe_allow_html=True)
        
        suffix_input = st.text_input(
            "роЗро▒рпБродро┐ роОро┤рпБродрпНродрпБроХро│рпН", 
            value="ing",
            key="suffix_input",
            help="роО.роХро╛. 'ing'"
        )
        
        before_letters = st.number_input(
            "роорпБройрпН роОро┤рпБродрпНродрпБроХро│рпН", 
            min_value=0, 
            step=1, 
            value=0,
            help="роЗро▒рпБродро┐ роОро┤рпБродрпНродрпБроХро│рпБроХрпНроХрпБ роорпБройрпН роОродрпНродройрпИ роОро┤рпБродрпНродрпБроХро│рпН?"
        )
        
        # ро╡рпЗроХрооро╛рой родрпЗроЯро▓рпБроХрпНроХрпБ
        with st.spinner("роЪрпКро▒рпНроХро│рпН роПро▒рпНро▒рокрпНрокроЯрпБроХро┐ройрпНро▒рой..."):
            all_words = sorted(set(wordnet.all_lemma_names()), key=lambda x: (len(x), x.lower()))
        
        # рокрпКро░рпБродрпНродрооро╛рой роЪрпКро▒рпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐родро▓рпН
        if suffix_input:
            with st.spinner("роЪрпКро▒рпНроХро│рпН родрпЗроЯрокрпНрокроЯрпБроХро┐ройрпНро▒рой..."):
                matches = find_matches(all_words, suffix_input, before_letters)
                st.success(f"**роХро┐роЯрпИродрпНрод роЪрпКро▒рпНроХро│рпН:** {len(matches)}")
                
                # роЪрпКро▒рпНроХро│ро┐ройрпН рокроЯрпНроЯро┐ропро▓рпН
                if matches:
                    st.markdown('<div class="word-list">', unsafe_allow_html=True)
                    for w in matches[:300]:
                        if suffix_input.lower() in w.lower():
                            parts = w.rsplit(suffix_input, 1)
                            st.markdown(
                                f'<div class="word-item">'
                                f"{parts[0]}<span class='highlight'>{suffix_input}</span>" 
                                f'</div>' if len(parts) > 1 else f'<div class="word-item">{w}</div>',
                                unsafe_allow_html=True
                            )
                    st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown("</div>", unsafe_allow_html=True)  # card close

    # родрпКроЯро░рпНрокрпБроЯрпИроп роЪрпКро▒рпНроХро│рпН рокроХрпБродро┐ (роЗроЯродрпБ рокроХрпНроХродрпНродро┐ро▓рпН)
    if 'chosen' in locals() and chosen:
        with st.container():
            st.markdown(f"""
            <div class="card">
                <h3>ЁЯФЧ родрпКроЯро░рпНрокрпБроЯрпИроп роЪрпКро▒рпНроХро│рпН</h3>
            """, unsafe_allow_html=True)
            
            syns = wordnet.synsets(chosen)
            if syns:
                related_words = get_related_words(syns[0])  # роорпБродро▓рпН рокрпКро░рпБро│ро┐ройрпН родрпКроЯро░рпНрокрпБроЯрпИроп роЪрпКро▒рпНроХро│рпН
                
                if related_words['роТродрпНрод рокрпКро░рпБро│рпН']:
                    st.markdown("**роТродрпНрод рокрпКро░рпБро│рпН роХрпКрогрпНроЯро╡рпИ**")
                    for word in set(related_words['роТродрпНрод рокрпКро░рпБро│рпН']):
                        st.markdown(f'<div class="related-word-item">{word}</div>', unsafe_allow_html=True)
                
                if related_words['роОродро┐ро░рпН рокрпКро░рпБро│рпН']:
                    st.markdown("**роОродро┐ро░рпН рокрпКро░рпБро│рпН роХрпКрогрпНроЯро╡рпИ**")
                    for word in set(related_words['роОродро┐ро░рпН рокрпКро░рпБро│рпН']):
                        st.markdown(f'<div class="related-word-item">{word}</div>', unsafe_allow_html=True)
                
                if related_words['роЙродро╛ро░рогроЩрпНроХро│рпН']:
                    st.markdown("**роЙродро╛ро░рог ро╡ро╛роХрпНроХро┐ропроЩрпНроХро│рпН**")
                    for example in related_words['роЙродро╛ро░рогроЩрпНроХро│рпН']:
                        st.markdown(f"- {example}")
            
            st.markdown("</div>", unsafe_allow_html=True)  # card close

with col2:
    # роЕро░рпНродрпНродроЩрпНроХро│рпН рокроХрпБродро┐
    with st.container():
        st.markdown(f"""
        <div class="card">
            <h3>ЁЯУЪ роЕро░рпНродрпНродроЩрпНроХро│рпН</h3>
        """, unsafe_allow_html=True)
        
        # родрпЗро░рпНро╡рпБ рокрпЖроЯрпНроЯро┐
        if 'matches' in locals() and matches:
            chosen = st.selectbox(
                "роТро░рпБ роЪрпКро▓рпНро▓рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН", 
                [""] + matches[:200],
                key="word_select",
                label_visibility="collapsed"
            )
            
            # рокродро┐ро╡ро┐ро▒роХрпНроХроорпН рокрпКродрпНродро╛ройрпН
            if chosen:
                towrite = BytesIO()
                syns = wordnet.synsets(chosen)
                if syns:
                    data_rows = []
                    for i, syn in enumerate(syns, start=1):
                        pos = "ро╡ро┐ройрпИ" if syn.pos() == 'v' else "рокрпЖропро░рпН" if syn.pos() == 'n' else "рокрпЖропро░роЯрпИ" if syn.pos() in ('a', 's') else "ро╡ро┐ройрпИропроЯрпИ"
                        eng = syn.definition()
                        ta = translate_to_tamil(eng)
                        data_rows.append({
                            "роОрогрпН": i, 
                            "ро╡роХрпИ": pos, 
                            "роЖроЩрпНроХро┐ро▓роорпН": eng, 
                            "родрооро┐ро┤рпН": ta
                        })
                    
                    df_export = pd.DataFrame(data_rows)
                    with pd.ExcelWriter(towrite, engine="xlsxwriter") as writer:
                        df_export.to_excel(writer, index=False, sheet_name="Meanings")
                    towrite.seek(0)
                    
                    st.download_button(
                        "ЁЯУК роЕройрпИродрпНродрпБ роЕро░рпНродрпНродроЩрпНроХро│рпИропрпБроорпН рокродро┐ро╡ро┐ро▒роХрпНроХрпБроХ", 
                        towrite, 
                        file_name=f"{chosen}_роЕро░рпНродрпНродроЩрпНроХро│рпН.xlsx",
                        help="роЗроирпНрод роЪрпКро▓рпНро▓ро┐ройрпН роЕройрпИродрпНродрпБ роЕро░рпНродрпНродроЩрпНроХро│рпИропрпБроорпН Excel роХрпЛрокрпНрокро╛роХ роЪрпЗрооро┐роХрпНроХ"
                    )
        
        # родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯ роЪрпКро▓рпНро▓ро┐ройрпН роЕро░рпНродрпНродроЩрпНроХро│рпН
        if 'chosen' in locals() and chosen:
            st.markdown(f"### тЬи {chosen}")
            
            syns = wordnet.synsets(chosen)
            if not syns:
                st.info("роЗроирпНрод роЪрпКро▓рпНро▓рпБроХрпНроХрпБ роЕро░рпНродрпНродроЩрпНроХро│рпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ.")
            else:
                for i, syn in enumerate(syns, start=1):
                    pos = "ро╡ро┐ройрпИ" if syn.pos() == 'v' else "рокрпЖропро░рпН" if syn.pos() == 'n' else "рокрпЖропро░роЯрпИ" if syn.pos() in ('a', 's') else "ро╡ро┐ройрпИропроЯрпИ"
                    eng = syn.definition()
                    ta = translate_to_tamil(eng)
                    
                    with st.expander(f"роЕро░рпНродрпНродроорпН {i} ({pos})", expanded=True if i == 1 else False):
                        st.markdown(f"**ЁЯМН роЖроЩрпНроХро┐ро▓роорпН:** {eng}")
                        if ta:
                            st.markdown(f"**ЁЯЗоЁЯЗ│ родрооро┐ро┤рпН:** {ta}")
        
        st.markdown("</div>", unsafe_allow_html=True)  # card close

# роЕроЯро┐роХрпНроХрпБро▒ро┐рокрпНрокрпБ
st.markdown(f"""
<div class="footer" style="color:#202124;">
    <p style="margin:0;">ЁЯТб роЙродро╡ро┐: роХрпБро▒рпБроХро┐роп роЗро▒рпБродро┐ роОро┤рпБродрпНродрпБроХро│рпИ роорпБродро▓ро┐ро▓рпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН (роО.роХро╛ 'ing', 'tion')</p>
    <p style="margin:10px 0 0 0; font-size:14px;">роЗроирпНрод рокропройрпНрокро╛роЯрпБ роХрпБро┤роирпНродрпИроХро│ро┐ройрпН роЖроЩрпНроХро┐ро▓ роХро▒рпНро▒ро▓рпИ роороХро┐ро┤рпНроЪрпНроЪро┐ропро╛роХ рооро╛ро▒рпНро▒ роЙродро╡рпБроХро┐ро▒родрпБ!</p>
</div>
""", unsafe_allow_html=True)

# рокроХрпНроХродрпНродро┐ройрпН роХрпАро┤рпЗ роТро░рпБ роЪро┐ро▒ро┐роп роЕро▓роЩрпНроХро╛ро░роорпН
st.markdown("""
<div style="text-align:center; margin-top:20px;">
    <div style="display:inline-block; margin:0 5px;">тЬи</div>
    <div style="display:inline-block; margin:0 5px;">ЁЯОИ</div>
    <div style="display:inline-block; margin:0 5px;">ЁЯУЪ</div>
    <div style="display:inline-block; margin:0 5px;">ЁЯМИ</div>
    <div style="display:inline-block; margin:0 5px;">ЁЯзй</div>
</div>
""", unsafe_allow_html=True)
