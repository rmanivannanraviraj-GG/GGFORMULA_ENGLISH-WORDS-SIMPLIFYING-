# app_streamlit_suffix_ready_kids.py
import streamlit as st
import pandas as pd
import textwrap
from io import BytesIO
from pathlib import Path
from deep_translator import GoogleTranslator
from nltk.corpus import wordnet
import nltk

# ЁЯФ╣ NLTK Data Download
nltk.download('wordnet')
nltk.download('omw-1.4')

# ---------- CONFIG ----------
st.set_page_config(
    page_title="роЪрпКро▓рпН ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ - Suffix Learner", 
    layout="wide",
    page_icon="ЁЯзТ"
)

CACHE_DIR = Path("data")
CACHE_DIR.mkdir(exist_ok=True)
CACHE_PATH = CACHE_DIR / "wordlist.txt"

POS_MAP = {'n': 'рокрпЖропро░рпНроЪрпНроЪрпКро▓рпН', 'v': 'ро╡ро┐ройрпИроЪрпНроЪрпКро▓рпН', 'a': 'рокрпЖропро░роЯрпИ', 's': 'рокрпЖропро░роЯрпИ', 'r': 'ро╡ро┐ройрпИропроЯрпИ'}
WRAP_EN = 80
WRAP_TA = 100

# ---------- Helpers ----------
@st.cache_data(show_spinner=False)
def ensure_wordnet():
    try:
        nltk.data.find("corpora/wordnet")
    except Exception:
        nltk.download("wordnet")
        nltk.download("omw-1.4")

@st.cache_data(show_spinner=False)
def translate_to_tamil(text: str):
    try:
        return GoogleTranslator(source='auto', target='ta').translate(text)
    except Exception:
        return ""

def find_matches(words, suffix, before_letters):
    suf = suffix.lower()
    matched = []
    for w in words:
        if w.lower().endswith(suf):
            if before_letters is None or before_letters == 0:
                matched.append(w)
            else:
                if len(w) - len(suf) == before_letters:
                    matched.append(w)
    matched.sort(key=len)
    return matched

def make_highlight_html(word, suf):
    if suf and word.lower().endswith(suf.lower()):
        p = word[:-len(suf)]
        s = word[-len(suf):]
        return f"<div style='font-size:20px; padding:6px;'><span>{p}</span><span style='color:#FF6B6B; font-weight:700'>{s}</span></div>"
    else:
        return f"<div style='font-size:20px; padding:6px;'>{word}</div>"

# ---------- UI Styling ----------
st.markdown("""
<style>
/* роХрпБро┤роирпНродрпИроХро│рпБроХрпНроХро╛рой ро╡рогрпНрогроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роОро│ро┐роп ро╡роЯро┐ро╡роорпИрокрпНрокрпБ */
.app-header {
    background: linear-gradient(90deg,#74b9ff,#a29bfe); 
    padding: 16px; 
    border-radius: 12px;
    color: white;
    text-align: center;
}

.kid-card {
    background:#fff9f9; 
    border-radius:12px; 
    padding:16px; 
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    border: 2px solid #ffeaa7;
}

.word-box {
    background:#fff; 
    border-radius:8px; 
    padding:10px; 
    margin-bottom:8px;
    border: 1px solid #dfe6e9;
}

/* рокрпЖро░ро┐роп роОро┤рпБродрпНродрпБро░рпБроХрпНроХро│рпН рооро▒рпНро▒рпБроорпН роОро│ро┐родро╛рой ро╡ро╛роЪро┐рокрпНрокрпБ */
body {
    font-family: 'Comic Sans MS', cursive, sans-serif;
}

h1, h2, h3, h4 {
    color: #2d3436;
}

/* рокрпКродрпНродро╛ройрпН ро╡роЯро┐ро╡роорпИрокрпНрокрпБ */
.stButton>button {
    background-color: #00b894;
    color: white;
    border-radius: 8px;
    padding: 8px 16px;
    font-size: 16px;
}

.stButton>button:hover {
    background-color: #55efc4;
    color: white;
}

/* родрпЖро░ро┐ро╡рпБ рокрпЖроЯрпНроЯро┐ ро╡роЯро┐ро╡роорпИрокрпНрокрпБ */
.stSelectbox>div>div>select {
    font-size: 16px;
    padding: 10px;
    border-radius: 8px;
}
</style>
""", unsafe_allow_html=True)

# родро▓рпИрокрпНрокрпБ рокроХрпБродро┐
st.markdown("""
<div class='app-header'>
    <h1 style='margin:0; color:white'>ЁЯзТ роЪрпКро▓рпН ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ - Suffix Learner</h1>
    <p style='margin:0; font-size:18px'>роЪрпКро▒рпНроХро│ро┐ройрпН роЗро▒рпБродро┐рокрпН рокроХрпБродро┐роХро│рпИроХрпН роХрогрпНроЯрпБрокро┐роЯро┐родрпНродрпБ, роЕро░рпНродрпНродроЩрпНроХро│рпИродрпН родрпЖро░ро┐роирпНродрпБроХрпКро│рпНро│рпБроЩрпНроХро│рпН!</p>
</div>
""", unsafe_allow_html=True)

st.write("")

# рокроХрпНроХрокрпНрокроЯрпНроЯрпИ (Sidebar)
with st.sidebar:
    st.markdown("""
    <div class='kid-card'>
        <h3>тЪЩя╕П роЕроорпИрокрпНрокрпБроХро│рпН</h3>
    """, unsafe_allow_html=True)
    
    before_letters = st.number_input(
        "роЗро▒рпБродро┐рокрпН рокроХрпБродро┐роХрпНроХрпБ роорпБройрпН роОродрпНродройрпИ роОро┤рпБродрпНродрпБроХро│рпН роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН?", 
        min_value=0, 
        step=1, 
        value=0,
        help="0 роОройро┐ро▓рпН роОродрпНродройрпИ роОро┤рпБродрпНродрпБроХро│рпН роЗро░рпБроирпНродро╛ро▓рпБроорпН рокро░ро╡ро╛ропро┐ро▓рпНро▓рпИ"
    )
    
    st.markdown("---")
    
    st.markdown("""
    <h3>тЮХ рокрпБродро┐роп роЪрпКро▓рпН роЪрпЗро░рпНроХрпНроХ</h3>
    <p>роЙроЩрпНроХро│рпБроХрпНроХрпБродрпН родрпЖро░ро┐роирпНрод рокрпБродро┐роп роЪрпКро▓рпНро▓рпИроЪрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН</p>
    """, unsafe_allow_html=True)
    
    add_w = st.text_input("роЪрпКро▓рпНро▓рпИ роЗроЩрпНроХрпЗ роОро┤рпБродро╡рпБроорпН", key="add_word")
    if st.button("роЪрпЗро░рпНроХрпНроХ"):
        if not add_w.strip():
            st.warning("роТро░рпБ роЪрпКро▓рпНро▓рпИ роОро┤рпБродро╡рпБроорпН.")
        else:
            CACHE_PATH.parent.mkdir(parents=True, exist_ok=True)
            with open(CACHE_PATH, "a", encoding="utf-8") as f:
                f.write("\n" + add_w.strip())
            st.success(f"'{add_w.strip()}' роЪрпКро▓рпН роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ!")

# WordNet роЪрпКро▒рпНроХро│рпИ роПро▒рпНро▒рпБроХро┐ро▒родрпБ
ensure_wordnet()
all_words = sorted(set(wordnet.all_lemma_names()), key=lambda x: (len(x), x.lower()))

# роорпБроХрпНроХро┐роп рокроХрпНроХ ро╡роЯро┐ро╡роорпИрокрпНрокрпБ
col1, col2 = st.columns([1, 2])

with col1:
    st.markdown("""
    <div class='kid-card'>
        <h2>ЁЯФН роЪрпКро▒рпНроХро│рпИродрпН родрпЗроЯрпБ</h2>
    """, unsafe_allow_html=True)
    
    suffix_input = st.text_input(
        "роЪрпКро▓рпНро▓ро┐ройрпН роЗро▒рпБродро┐рокрпН рокроХрпБродро┐ропрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН (роО.роХро╛. 'ing')", 
        value="ing",
        key="suffix_input"
    )
    
    matches = find_matches(all_words, suffix_input, before_letters)
    
    st.markdown(f"**роХро┐роЯрпИродрпНрод роЪрпКро▒рпНроХро│рпН:** {len(matches)}")
    
    st.markdown("""
    <div style='max-height:520px; overflow:auto; padding:10px; background:#f7f1e3; border-radius:10px; border: 2px solid #fdcb6e;'>
    """, unsafe_allow_html=True)
    
    for w in matches[:5000]:
        st.markdown(make_highlight_html(w, suffix_input), unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)  # kid-card close

with col2:
    st.markdown("""
    <div class='kid-card'>
        <h2>ЁЯФБ ро╡ро┐ро░рпИро╡ро╛рой родрпЗро░рпНро╡рпБ</h2>
        <p>роЪрпКро▓рпНро▓рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБродрпНродрпБ роЕро░рпНродрпНродроЩрпНроХро│рпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН</p>
    """, unsafe_allow_html=True)
    
    chosen = st.selectbox(
        "роТро░рпБ роЪрпКро▓рпНро▓рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН", 
        [""] + matches[:200],
        key="word_select",
        label_visibility="collapsed"
    )
    
    st.markdown("</div>", unsafe_allow_html=True)  # kid-card close
    
    if chosen:
        # родро▓рпИрокрпНрокрпБ ро╡ро░ро┐роЪрпИ - Download рокрпКродрпНродро╛ройрпН рооро▒рпНро▒рпБроорпН Meanings & Translations
        col_header1, col_header2 = st.columns([1, 4])
        
        with col_header1:
            # Excel роПро▒рпНро▒рпБроородро┐
            towrite = BytesIO()
            syns = wordnet.synsets(chosen)
            if syns:
                data_rows = []
                for i, syn in enumerate(syns, start=1):
                    pos = POS_MAP.get(syn.pos(), syn.pos())
                    eng = syn.definition()
                    ta = translate_to_tamil(eng)
                    data_rows.append({"роОрогрпН": i, "рокроХрпБрокро╛роЯрпБ": pos, "роЖроЩрпНроХро┐ро▓роорпН": eng, "родрооро┐ро┤рпН": ta})
                
                df_export = pd.DataFrame(data_rows)
                with pd.ExcelWriter(towrite, engine="xlsxwriter") as writer:
                    df_export.to_excel(writer, index=False, sheet_name="Meanings")
                towrite.seek(0)
                st.download_button(
                    "ЁЯУЭ Excel-роЖроХ роЪрпЗрооро┐роХрпНроХ", 
                    towrite, 
                    file_name=f"{chosen}_meanings.xlsx",
                    help="роЗроирпНрод роЪрпКро▓рпНро▓ро┐ройрпН роЕро░рпНродрпНродроЩрпНроХро│рпИ Excel роХрпЛрокрпНрокро╛роХ роЪрпЗрооро┐роХрпНроХ"
                )
        
        with col_header2:
            st.markdown("""
            <div class='kid-card'>
                <h2>ЁЯУЦ роЕро░рпНродрпНродроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБроХро│рпН</h2>
            """, unsafe_allow_html=True)
        
        # роЪрпКро▓рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпН
        st.markdown(f"### тЬи **{chosen}**")
        
        syns = wordnet.synsets(chosen)
        if not syns:
            st.info("роЗроирпНрод роЪрпКро▓рпНро▓рпБроХрпНроХрпБ WordNet-ро▓рпН роЕро░рпНродрпНродроЩрпНроХро│рпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ.")
        else:
            html = """
            <div style='border-radius:10px; overflow:hidden; box-shadow:0 2px 8px rgba(0,0,0,0.1);'>
                <table style='width:100%; border-collapse:collapse;'>
                    <tr style='background:#74b9ff; color:white;'>
                        <th style='padding:12px; text-align:left;'>роОрогрпН</th>
                        <th style='padding:12px; text-align:left;'>рокроХрпБрокро╛роЯрпБ</th>
                        <th style='padding:12px; text-align:left;'>роЖроЩрпНроХро┐ро▓роорпН</th>
                        <th style='padding:12px; text-align:left;'>родрооро┐ро┤рпН</th>
                    </tr>
            """
            
            for i, syn in enumerate(syns, start=1):
                pos = POS_MAP.get(syn.pos(), syn.pos())
                eng = syn.definition()
                ta = translate_to_tamil(eng)
                eng_wrapped = "<br>".join(textwrap.wrap(eng, WRAP_EN))
                ta_wrapped = "<br>".join(textwrap.wrap(ta, WRAP_TA)) if ta else ""
                
                row_color = "#ffffff" if i % 2 == 1 else "#f5f5f5"
                
                html += f"""
                <tr style='background:{row_color};'>
                    <td style='padding:12px; border-bottom:1px solid #dfe6e9;'>{i}</td>
                    <td style='padding:12px; border-bottom:1px solid #dfe6e9;'>{pos}</td>
                    <td style='padding:12px; border-bottom:1px solid #dfe6e9;'>{eng_wrapped}</td>
                    <td style='padding:12px; border-bottom:1px solid #dfe6e9;'>{ta_wrapped}</td>
                </tr>
                """
            
            html += "</table></div>"
            st.markdown(html, unsafe_allow_html=True)
            
            st.markdown("</div>", unsafe_allow_html=True)  # kid-card close

# роЕроЯро┐роХрпНроХрпБро▒ро┐рокрпНрокрпБ
st.markdown("""
<div style='margin-top:24px; padding:12px; background:#f5f6fa; border-radius:8px; text-align:center; color:#636e72;'>
    <p style='margin:0; font-size:16px;'>ЁЯТб роЙродро╡ро┐: роХрпБро▒рпБроХро┐роп роЗро▒рпБродро┐рокрпНрокроХрпБродро┐роХро│рпИ (роО.роХро╛. 'ing') рокропройрпНрокроЯрпБродрпНродро┐ роЪрпКро▒рпНроХро│рпИ роОро│ро┐родро╛роХ роХрогрпНроЯро▒ро┐ропро▓ро╛роорпН. рокрпБродро┐роп роЪрпКро▒рпНроХро│рпИ рокроХрпНроХрокрпНрокроЯрпНроЯрпИропро┐ро▓рпН роЪрпЗро░рпНроХрпНроХро▓ро╛роорпН.</p>
</div>
""", unsafe_allow_html=True)
