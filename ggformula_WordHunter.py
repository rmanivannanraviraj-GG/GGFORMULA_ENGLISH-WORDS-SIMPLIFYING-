# app_streamlit_suffix_pro.py
import streamlit as st
import pandas as pd
import textwrap
from io import BytesIO
from pathlib import Path
from deep_translator import GoogleTranslator
from nltk.corpus import wordnet
import nltk

# ЁЯФ╣ NLTK Data Download
nltk.download('wordnet')
nltk.download('omw-1.4')

# ---------- CONFIG ----------
st.set_page_config(
    page_title="роЪрпКро▓рпН роЖропрпНро╡рпБ роХро░рпБро╡ро┐", 
    layout="wide",
    page_icon="ЁЯФН"
)

POS_MAP = {'n': 'рокрпЖропро░рпНроЪрпНроЪрпКро▓рпН', 'v': 'ро╡ро┐ройрпИроЪрпНроЪрпКро▓рпН', 'a': 'рокрпЖропро░роЯрпИ', 's': 'рокрпЖропро░роЯрпИ', 'r': 'ро╡ро┐ройрпИропроЯрпИ'}
WRAP_LEN = 60  # роТро░рпБ ро╡ро░ро┐ропро┐ро▓рпН роЕродро┐роХрокроЯрпНроЪ роОро┤рпБродрпНродрпБроХро│рпН

# ---------- Helpers ----------
@st.cache_data(show_spinner=False)
def ensure_wordnet():
    try:
        nltk.data.find("corpora/wordnet")
    except Exception:
        nltk.download("wordnet")
        nltk.download("omw-1.4")

@st.cache_data(show_spinner=False)
def translate_to_tamil(text: str):
    try:
        # Length check for Google Translate API
        if len(text) > 5000:
            return "роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБ роирпАро│роорпН роЕродро┐роХроорпН"
        return GoogleTranslator(source='auto', target='ta').translate(text)
    except Exception as e:
        return f"роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБ рокро┐ро┤рпИ: {str(e)}"

def find_matches(words, suffix, before_letters):
    suf = suffix.lower()
    matched = []
    for w in words:
        if w.lower().endswith(suf):
            if before_letters is None or before_letters == 0:
                matched.append(w)
            else:
                if len(w) - len(suf) == before_letters:
                    matched.append(w)
    matched.sort(key=len)
    return matched

def make_highlight_html(word, suf):
    if suf and word.lower().endswith(suf.lower()):
        p = word[:-len(suf)]
        s = word[-len(suf):]
        return f"<span>{p}<span style='color:#FF6B6B; font-weight:700'>{s}</span></span>"
    else:
        return word

def wrap_text(text, width):
    """роЙро░рпИропрпИ ро╡ро░ро┐роХро│ро╛роХ роороЯро┐роХрпНроХрпБроорпН роЪрпЖропро▓рпНрокро╛роЯрпБ"""
    if not text:
        return ""
    return "<br>".join(textwrap.wrap(text, width=width))

# ---------- UI Styling ----------
st.markdown("""
<style>
/* роорпЗроорпНрокроЯрпНроЯ роЕроЯрпНроЯро╡рогрпИ ро╡роЯро┐ро╡роорпИрокрпНрокрпБ */
.meaning-table {
    width: 100%;
    border-collapse: collapse;
    margin: 16px 0;
    font-family: Arial, sans-serif;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.meaning-table th {
    background-color: #4a89dc;
    color: white;
    padding: 12px;
    text-align: left;
    font-weight: 600;
}

.meaning-table td {
    padding: 12px;
    border-bottom: 1px solid #e0e0e0;
    vertical-align: top;
}

.meaning-table tr:nth-child(even) {
    background-color: #f8f9fa;
}

.meaning-table tr:hover {
    background-color: #f1f5fd;
}

/* рокрпКродрпБ ро╡роЯро┐ро╡роорпИрокрпНрокрпБ */
.definition-block {
    line-height: 1.6;
    margin-bottom: 4px;
}

.tamil-def {
    color: #2d572c;
    font-style: italic;
}

/* роЙро│рпНро│рпАроЯрпБ рокрпЖроЯрпНроЯро┐роХро│рпН */
.stTextInput>div>div>input {
    padding: 10px;
    font-size: 14px;
}

/* родро▓рпИрокрпНрокрпБроХро│рпН */
h2, h3 {
    color: #2c3e50;
    margin-top: 1.2em;
    margin-bottom: 0.8em;
}
</style>
""", unsafe_allow_html=True)

# родро▓рпИрокрпНрокрпБ рокроХрпБродро┐
st.markdown("<h1 style='text-align:center; color:#2c3e50; margin-bottom:0.5em;'>ЁЯФН роЪрпКро▓рпН роЖропрпНро╡рпБ роХро░рпБро╡ро┐</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align:center; color:#7f8c8d; margin-top:0;'>роЪрпКро▒рпНроХро│ро┐ройрпН роЕро░рпНродрпНродроЩрпНроХро│рпИропрпБроорпН роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБроХро│рпИропрпБроорпН роЖро░ро╛ропрпБроЩрпНроХро│рпН</p>", unsafe_allow_html=True)

# рокроХрпНроХрокрпНрокроЯрпНроЯрпИ (Sidebar)
with st.sidebar:
    st.header("тЪЩя╕П роЕроорпИрокрпНрокрпБроХро│рпН")
    before_letters = st.number_input(
        "роЗро▒рпБродро┐ роОро┤рпБродрпНродрпБроХро│рпБроХрпНроХрпБ роорпБройрпН роЙро│рпНро│ роОро┤рпБродрпНродрпБроХро│рпН", 
        min_value=0, 
        step=1, 
        value=0,
        help="роЪро░ро┐ропро╛рой роОро┤рпБродрпНродрпБ роОрогрпНрогро┐роХрпНроХрпИропрпИ роХрпБро▒ро┐рокрпНрокро┐роЯро╡рпБроорпН (0 роОройрпНрокродрпБ роОроирпНрод роОрогрпНрогрпИропрпБроорпН)"
    )
    
    st.markdown("---")
    st.header("тЮХ рокрпБродро┐роп роЪрпКро▓рпН роЪрпЗро░рпНроХрпНроХ")
    add_w = st.text_input("роЪрпКро▓рпНро▓рпИ роЗроЩрпНроХрпБ роЙро│рпНро│ро┐роЯрпБроХ", key="add_word")
    if st.button("роЪрпЗро░рпНроХрпНроХ"):
        if not add_w.strip():
            st.warning("родропро╡рпБ роЪрпЖропрпНродрпБ роТро░рпБ роЪрпКро▓рпНро▓рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН")
        else:
            st.success(f"'{add_w.strip()}' роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ!")

# WordNet роЪрпКро▒рпНроХро│рпИ роПро▒рпНро▒рпБроХро┐ро▒родрпБ
ensure_wordnet()
all_words = sorted(set(wordnet.all_lemma_names()), key=lambda x: (len(x), x.lower()))

# роорпБроХрпНроХро┐роп рокроХрпНроХ ро╡роЯро┐ро╡роорпИрокрпНрокрпБ
col1, col2 = st.columns([1, 2])

with col1:
    st.header("роЪрпКро▓рпН родрпЗроЯро▓рпН")
    suffix_input = st.text_input(
        "роЗро▒рпБродро┐ роОро┤рпБродрпНродрпБродрпН родрпКроЯро░рпН (роО.роХро╛. 'tion')", 
        value="tion",
        key="suffix_input"
    )
    
    matches = find_matches(all_words, suffix_input, before_letters)
    st.markdown(f"**рокрпКро░рпБроирпНродро┐роп роЪрпКро▒рпНроХро│рпН:** {len(matches)}")
    
    # роЪрпКро▓рпН рокроЯрпНроЯро┐ропро▓рпН
    st.markdown("<div style='max-height:500px; overflow-y:auto; margin-top:12px; border:1px solid #eee; padding:8px; border-radius:4px;'>", unsafe_allow_html=True)
    for w in matches[:1000]:  # роЪрпЖропро▓рпНродро┐ро▒ройрпБроХрпНроХро╛роХ 1000 роЪрпКро▒рпНроХро│рпН роороЯрпНроЯрпБроорпН
        st.markdown(f"<div style='padding:4px 0;'>{make_highlight_html(w, suffix_input)}</div>", unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

with col2:
    st.header("роЪрпКро▓рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпН")
    chosen = st.selectbox(
        "роТро░рпБ роЪрпКро▓рпНро▓рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН", 
        [""] + matches[:200],
        key="word_select",
        label_visibility="collapsed"
    )
    
    if chosen:
        # родро▓рпИрокрпНрокрпБ ро╡ро░ро┐роЪрпИ
        col_dl, _ = st.columns([1, 4])
        with col_dl:
            # Excel роПро▒рпНро▒рпБроородро┐
            towrite = BytesIO()
            syns = wordnet.synsets(chosen)
            if syns:
                data_rows = []
                for i, syn in enumerate(syns, start=1):
                    pos = POS_MAP.get(syn.pos(), syn.pos())
                    eng = syn.definition()
                    ta = translate_to_tamil(eng)
                    data_rows.append({
                        "роОрогрпН": i, 
                        "рокроХрпБрокро╛роЯрпБ": pos, 
                        "роЖроЩрпНроХро┐ро▓роорпН": eng, 
                        "родрооро┐ро┤рпН": ta
                    })
                
                df_export = pd.DataFrame(data_rows)
                with pd.ExcelWriter(towrite, engine="xlsxwriter") as writer:
                    df_export.to_excel(writer, index=False, sheet_name="Meanings")
                towrite.seek(0)
                st.download_button(
                    "ЁЯУК Excel-роЖроХ роОроЯрпБроХрпНроХ", 
                    towrite, 
                    file_name=f"{chosen}_meanings.xlsx",
                    help="роЗроирпНрод роЪрпКро▓рпНро▓ро┐ройрпН роЕро░рпНродрпНродроЩрпНроХро│рпИ Excel роХрпЛрокрпНрокро╛роХ роЪрпЗрооро┐роХрпНроХ"
                )
        
        st.subheader(f"'{chosen}' - ро╡ро┐ро░ро┐ро╡ро╛рой роЕро░рпНродрпНродроЩрпНроХро│рпН")
        
        syns = wordnet.synsets(chosen)
        if not syns:
            st.info("роЗроирпНрод роЪрпКро▓рпНро▓рпБроХрпНроХрпБ ро╡ро░рпИропро▒рпИроХро│рпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ")
        else:
            # роорпЗроорпНрокроЯрпНроЯ роЕро░рпНродрпНродроЩрпНроХро│рпН роЕроЯрпНроЯро╡рогрпИ
            html = """
            <table class="meaning-table">
                <thead>
                    <tr>
                        <th style="width:5%">роОрогрпН</th>
                        <th style="width:15%">роЪрпКро▓рпН ро╡роХрпИ</th>
                        <th style="width:40%">роЖроЩрпНроХро┐ро▓ ро╡ро░рпИропро▒рпИ</th>
                        <th style="width:40%">родрооро┐ро┤рпН роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБ</th>
                    </tr>
                </thead>
                <tbody>
            """
            
            for i, syn in enumerate(syns, start=1):
                pos = POS_MAP.get(syn.pos(), syn.pos())
                eng = syn.definition()
                ta = translate_to_tamil(eng)
                
                # роЙро░рпИропрпИ ро╡ро░ро┐роХро│ро╛роХ роороЯро┐роХрпНроХрпБроорпН рокроХрпБродро┐
                eng_wrapped = wrap_text(eng, WRAP_LEN)
                ta_wrapped = wrap_text(ta, WRAP_LEN) if ta else "роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБ роЗро▓рпНро▓рпИ"
                
                html += f"""
                <tr>
                    <td>{i}</td>
                    <td>{pos}</td>
                    <td><div class="definition-block">{eng_wrapped}</div></td>
                    <td><div class="definition-block tamil-def">{ta_wrapped}</div></td>
                </tr>
                """
            
            html += "</tbody></table>"
            st.markdown(html, unsafe_allow_html=True)

# роЕроЯро┐роХрпНроХрпБро▒ро┐рокрпНрокрпБ
st.markdown("---")
st.markdown("<p style='text-align:center; color:#7f8c8d; font-size:0.9em;'>ЁЯТб роЙродро╡ро┐: родрпБро▓рпНро▓ро┐ропрооро╛рой роорпБроЯро┐ро╡рпБроХро│рпБроХрпНроХрпБ роХрпБро▒рпБроХро┐роп роЗро▒рпБродро┐ роОро┤рпБродрпНродрпБродрпН родрпКроЯро░рпНроХро│рпИ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН</p>", unsafe_allow_html=True)
